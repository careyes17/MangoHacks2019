{"version":3,"sources":["webpack:///./src/screens/ContactInfo.vue?7425","webpack:///./src/screens/ContactInfo.vue?340d","webpack:///./src/screens/ContactInfo.vue?4422","webpack:///./src/screens/ContactInfo.vue","webpack:///./src/graphql/patientFirstNames.gql"],"names":["render","_vm","this","_h","$createElement","_c","_self","_v","attrs","query","__webpack_require__","scopedSlots","_u","key","fn","ref","ref_result","result","data","loading","_l","patientsList","user","firstName","staticClass","on","click","$event","newData","_s","__typename","staticRenderFns","ContactInfovue_type_script_lang_ts_","vue_runtime_esm","extend","methods","console","log","screens_ContactInfovue_type_script_lang_ts_","component","Object","componentNormalizer","__webpack_exports__","doc","kind","definitions","operation","name","value","variableDefinitions","directives","selectionSet","selections","arguments","loc","start","end","source","body","locationOffset","line","column","collectFragmentReferences","node","refs","add","type","forEach","selection","def","definitionRefs","findOperation","i","length","element","oneQuery","operationName","newDoc","hasOwnProperty","opRefs","Set","allRefs","newRefs","refName","size","prevRefs","has","childRefs","childRef","op","push","module","exports"],"mappings":"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","file":"js/chunk-1d4cb27e.f0203a89.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('v-btn',[_vm._v(\"\\n    Text\\n  \")]),_c('ApolloQuery',{attrs:{\"query\":require('@/graphql/patientFirstNames.gql')},scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar ref_result = ref.result;\nvar data = ref_result.data;\nvar loading = ref_result.loading;\nreturn [(loading)?_c('div',[_vm._v(\"Loading...\")]):_c('ul',_vm._l((data.patientsList.items),function(user){return _c('li',{key:user.firstName,staticClass:\"user\",on:{\"click\":function($event){_vm.newData(data)}}},[_vm._v(\"\\n          \"+_vm._s(user.firstName)+\": \"+_vm._s(user.__typename)+\"\\n        \")])}),0)]}}])})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport Vue from 'vue';\r\n\r\nexport default Vue.extend({\r\n  data() {\r\n    return {\r\n\r\n    };\r\n  },\r\n  methods: {\r\n    newData(data: any) {\r\n      console.log(data);\r\n    }\r\n  ,}\r\n});\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--13-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ContactInfo.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--13-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ContactInfo.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ContactInfo.vue?vue&type=template&id=75fb177d&\"\nimport script from \"./ContactInfo.vue?vue&type=script&lang=ts&\"\nexport * from \"./ContactInfo.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"patientFirstNames\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"patientsList\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"items\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"firstName\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":86}};\n    doc.loc.source = {\"body\":\"query patientFirstNames {\\r\\n  patientsList{\\r\\n    items{\\r\\n      firstName\\r\\n    }\\r\\n  }\\r\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \r\n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \r\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"patientFirstNames\"] = oneQuery(doc, \"patientFirstNames\");\n        \r\n"],"sourceRoot":""}